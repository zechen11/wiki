                                =Beginner's Guide=

1.如何将某些文件添加到代码库中？

git add ./path/to/your/wanted

添加所有未跟踪文件：

git add -A

添加所有未未跟踪文件并且提交：

git commit -a

2.如何将某些文件从代码库中删除？

git rm ./path/to/your/wanted

Create a new repository on the command line

touch README.md
git init
git add README.md
git commit -m "first commit"
git remote add origin https://github.com/zechen11/wiki.git
git push -u origin master

Push an existing repository from the command line

git remote add origin https://github.com/zechen11/wiki.git
git push -u origin master

4.最常用的git 命令:
{{{
zarch% git --help
usage: git [--version] [--help] [-c name=value]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p|--paginate|--no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

The most commonly used git commands are:
   add        Add file contents to the index
              这是一个多功能命令，根据目标文件的状态不同，此命令的效果也不同：
              可以用它开始跟踪新文件，或者把已跟踪的文件放到暂存区，还能用于合
              并时把有冲突的文件标记为已解决的状态等。
   bisect     Find by binary search the change that introduced a bug
   branch     List, create, or delete branches
   checkout   Checkout a branch or paths to the working tree
   clone      Clone a repository into a new directory
   commit     Record changes to the repository
              将暂存起来的修改提交到仓库。
              -v 将修改差异的每一行包含到提交说明的注释中。
              -m 后跟提交说明，在一行命令中提交更新。
              -a 将所有已经跟踪过的文件暂存起来一并提交，而不是只提交已暂存的。
              --amend 追加提交，将此次提交和上一次提交合并为一次提交。
   diff       Show changes between commits, commit and working tree, etc
              如果不接任何选项，查看的是还没有暂存起来的改动。
              --cached 查看已经暂存起来的文件和上次提交时的快照之间的差异。
              --staged 高版本git中使用，效果和--cached一样，但更好记一些。
   fetch      Download objects and refs from another repository
              从远程仓库抓取数据到本地。
   grep       Print lines matching a pattern
   init       Create an empty Git repository or reinitialize an existing one
   log        Show commit logs
              查看提交历史。
              -p 显示每次提交的内容差异。
              -n n为数字，仅显示最近的n次更新的记录。
              --since, --after 仅显示指定时间之后的提交。
              --until, --before 仅显示指定时间之前的提交。
              --author 仅显示指定作者相关的提交。
              --committer 仅显示指定提交者相关的提交。
              --grep 搜索提交说明中的关键字。
              --all-match 要得到同时满足两个搜索选项条件的提交时使用。
                          如同时使用--grep 和--author时。
              --stat 显示每次更新的文件修改统计信息。
              --shortstat 只显示 --stat 中最后的行数修改添加移除信息。
              --name-only 仅在提交信息后显示已修改的文件清单。
              --name-status 显示新增、修改、删除的文件清单。
              --abbrev-commit 仅显示 SHA-1 的前几个字符，而非所有的 40 个字符。
              --relative-date 使用较短的相对时间显示（比如，“2 weeks ago”）。
              --graph 显示 ASCII 图形表示的分支合并历史。
              --pretty 可以指定使用完全不同于默认格式的方式展示提交历史。如用
                       oneline 将每个提交放在一行显示。git log --pretty=oneline
                       另外还有short full fuller可用。
                       format 可以定制要显示的记录格式。
                       git log --pretty=format:"%h - %an, %ar : %s"
                       ca82a6d - Scott Chacon, 11 months ago : third commit
                       085bb3b - Scott Chacon, 11 months ago : second commit
                       a11bef0 - Scott Chacon, 11 months ago : first commit
| 选项 | 说明                                       |
|------|--------------------------------------------|
| %H   | 提交对象（commit）的完整哈希字串           |
| %h   | 提交对象的简短哈希字串                     |
| %T   | 树对象（tree）的完整哈希字串               |
| %t   | 树对象的简短哈希字串                       |
| %P   | 父对象（parent）的完整哈希字串             |
| %p   | 父对象的简短哈希字串                       |
| %an  | 作者（author）的名字                       |
| %ae  | 作者的电子邮件地址                         |
| %ad  | 作者修订日期（可以用 -date= 选项定制格式） |
| %ar  | 作者修订日期，按多久以前的方式显示         |
| %cn  | 提交者(committer)的名字                    |
| %ce  | 提交者的电子邮件地址                       |
| %cd  | 提交日期                                   |
| %cr  | 提交日期，按多久以前的方式显示             |
| %s   | 提交说明                                   |
   merge      Join two or more development histories together
   mv         Move or rename a file, a directory, or a symlink
              移动或重命名文件、目录或链接。
   pull       Fetch from and merge with another repository or a local branch
   push       Update remote refs along with associated objects
              推送本地仓库中的数据到远程仓库。
              git push [remote-name] [branch-name]
              git push [remote-name] [tag-name] 推送某个标签到远程仓库。
              git push [remote-name] --tags 推送所有标签到远程仓库。
   rebase     Forward-port local commits to the updated upstream head
   reset      Reset current HEAD to the specified state
              git reset HEAD <file> 取消文件file的暂存。
   rm         Remove files from the working tree and from the index
              从已跟踪文件清单中移除，并删除工作目录中的指定文件。
              -f 强制删除，如果删除之前修改过且已经暂存，使用该选项。
              --cached 仅移出跟踪但不删除文件。
   show       Show various types of objects
   status     Show the working tree status
   tag        Create, list, delete or verify a tag object signed with GPG
}}}

5. 
==配置==

* /etc/gitconfig文件：系统中对所有用户普适的配置。`git config`时用`--system`选项，读写的就是这个文件。windows该文件在git安装目录下。
* ~/.gitconfig文件：用户目录下的配置文件，只适用于该用户。`git config`时用`--global`选项，读写的就是这个文件。windows该文件在$变量指定的目录下，一般为`C:\Documents and Settings\$USER`。
* 工作目录中的.git/config文件：仅针对当前项目。

每级配置都会覆盖上层相同配置。优先级：.git/config > ~/.gitconfig > /etc/gitconfig。

{{{
# 用户信息
$ git config --global user.name "zechen11"
$ git config --global user.email zechen11@qq.com

# 文本编辑器
$ git config --global core.editor qvim

# 差异分析工具，如kdiff3|tkdiff|meld|xxdiff|emerge|vimdiff|gvimdiff|ecmerge|opendiff等。
$ git config --global merge.tool vimdiff

# 查看配置信息
$ git config --list
}}}

==三个区域==

* 本地数据目录：每个项目都有一个.git目录，它是用来保存元数据和对象数据库的地方。本地的.git目录就是本地数据目录。
* 工作目录：从项目中取出某个版本的所有文件和目录，用以开始后续工作的目录。
* 暂存区域：只不过是一个简单的文件，一般都放在.git目录中。

==四种操作==

* 跟踪：`git add`，将文件纳入版本控制。
* 提交：`git commit`，将修改提交到暂存区域。

==四种状态==

* 未跟踪（untracked）：
* 已修改（modified）：修改了某够文件，但还没有提交保存。
* 已提交（committed）：该文件已经被安全地保存在本地数据库中了。
* 已暂存（staged）：把已修改的文件放在下次提交时要保存的清单中。

==分布式工作流程==

* 集中式工作流程
* 集成管理员工作流程
* 司令官与副官工作流程

==提交指南==

* 不要在更新中提交多余的空白字符（whitespace）。用`git diff --check`命令可以将多余的空白字符修正列出来。
* 每次提交限定完成一次逻辑功能。
* 提交说明最好控制在一行以内，50个字符一下，简明扼要地描述更新内容，空开一行后，再展开详细注解。详尽注解包括本次修订的因由，前后不同实现的比较。提交说明应该用祈使现在式语态。

6. 重命名远程仓库
`git remote rename origin paul` 将名为origin的远程仓库重命名为paul

7. 添加远程仓库
`git remote add paul git://github.com/zechen11/wiki.git` 添加远程仓库，并命名为pual


